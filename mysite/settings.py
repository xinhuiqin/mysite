"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 初始化配置参数:用于正式环境
config_file_path = os.path.join(BASE_DIR, "pro_settings.py")
if os.path.exists(config_file_path):
    import pro_settings as settings

# add apps to the sys.path
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4d#v@ww8hq@)q5^iw@s)_%z@ltzn3y3(dsvaft981ue@ejff(q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Hosts/domain names that are valid for this site; required if DEBUG is False
# See https://docs.djangoproject.com/en/1.3/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # django-haystack
    'haystack',

    'user.apps.UserConfig',
    'home.apps.HomeConfig',
    'blog.apps.BlogConfig',
    'comment.apps.CommentConfig',
]

"""
django-allauth之所以设置SIT_ID, 是因为用到django的“site”
django site相关内容详见：https://docs.djangoproject.com/en/2.2/ref/contrib/sites/#s-enabling-the-sites-framework
"""
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    # sqlite3
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }

    # mysql
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': '123456',
        'NAME': 'mysite',
        'OPTIONS': {'charset': 'utf8mb4'},
    }

}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# Absolute path to the directory static files should be collected to.
# Don't put anything in this directory yourself; store your static files
# in apps' "static/" subdirectories and in STATICFILES_DIRS.
# Example: "/home/media/media.lawrence.com/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'collect_static')

# Additional locations of static files
STATICFILES_DIRS = [
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(BASE_DIR, 'static')

]

# 媒体文件收集
MEDIA_URL = 'static/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
WORK_PATH = os.path.abspath(os.path.dirname(__file__))
PRJ_NAME = os.path.split(WORK_PATH)[-1]
LOG_PATH = "/var/log/sweeneys/mysite/%s.log" % PRJ_NAME
#
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'formatters': {
#         'verbose': {
#             'format': 'sweeneys %(levelname)s %(asctime)s %(module)s %(funcName)s %(lineno)d %(message)s'
#         },
#         'simple': {
#             'format': 'sweeneys %(levelname)s %(message)s'
#         },
#     },
#     'handlers': {
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler'
#         },
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'formatter': 'verbose',
#             'filename': LOG_PATH, # 必须保证用户对该目录有读写权限
#         },
#     },
#     'loggers': {
#         'django.request': {
#             'handlers': ['mail_admins', 'file'],
#             'level': 'ERROR',
#             'propagate': True,
#         },
#         'default': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     }
# }
# 自定义用户模型
AUTH_USER_MODEL = 'user.USER'  # user是应用名，USER是模型名

# 网站默认设置和上下文信息
SITE_END_TITLE = os.getenv('Sweeneys_SITE_END_TITLE', 'Sweeneys')
SITE_DESCRIPTION = os.getenv('Sweeneys_SITE_DESCRIPTION', 'Sweeneys的官方网站')
SITE_KEYWORDS = os.getenv('Sweeneys_SITE_KEYWORDS', 'Sweeneys,Python,Django, Nginx, Gunicorn, Supervisor, uWSGI, WSGI')

# django-allauth设置用户注册的时候必须填写邮箱地址
ACCOUNT_EMAIL_REQUIRED = True

#  Django发送邮件设置
EMAIL_HOST = 'smtp.qq.com'
EMAIL_HOST_USER = 'sweeneys@qq.com'
EMAIL_HOST_PASSWORD = 'vfibizonnhwfbdih'
EMAIL_PORT = 465
EMAIL_TIMEOUT = 5
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = 'sweeneys@qq.com'

"""
Django-allauth注册邮箱验证.有三种值：
mandatory: 强制验证email，否则使用用户名和邮箱名都不可用登陆。
optional: 不强制验证email, 发送验证邮件，不验证邮箱只能使用用户名登陆。
none: 不强制验证email，不发送验证邮件，不验证邮箱使用用户名和邮箱名都可以登陆。
"""
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

# 设置邮箱确认的有效时间
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 0.01

#  django-allauth设置验证邮箱后自动登陆
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/accounts/login'

# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/accounts/login'

# django-allauth设置登录成功后重定向的页面，默认是/accounts/profile/
LOGIN_REDIRECT_URL = "/"

# django-allauth设置直接退出，不用确认
ACCOUNT_LOGOUT_ON_GET = True

# django-allauth设置可以用用户名也可以用邮箱登陆
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend"
)

# 统一分页设置
BASE_PAGINATE_BY = 3
BASE_PAGINATE_ORPHANS = 5
# django-haystack 配置
HAYSTACK_CONNECTIONS = {
    # 'default': {
    #     'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
    #     'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    # },
    'default': {
        # 选择语言解析器为自己更换的结巴分词
        'ENGINE': 'blog.whoosh_cn_backend.WhooshEngine',
        # 设置索引文件的保存位置为项目根目录下，目录名为whoosh_index
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    },
}
# 指定索引更新的时间
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
